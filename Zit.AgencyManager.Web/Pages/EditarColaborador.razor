@page "/EditarColaborador/{ColaboradorId}"
@inject ColaboradorAPI colaboradorAPI
@inject CargoAPI cargoAPI
@inject UsuarioAPI usuarioAPI
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject TitleService TitleService

<PageTitle>Editar Colaborador</PageTitle>

<MudForm Model="@colaborador" @ref="form">

    <MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3 sombra" Justify="Justify.Center">   
   
        <MudSwitch @bind-Value="colaborador.Ativo" ReadOnly Label="Ativo" Color="Color.Success" />
    
        <MudText Class="mt-6" Typo="Typo.h6">Dados Pessoais</MudText>
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudTextField Class="mt-2" T="string" Placeholder="Nome Completo"
                              Variant="Variant.Outlined"
                              @bind-Value="colaborador.Nome"
                              Label="Nome Completo" For="@(() => colaborador.Nome)" />
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudTextField Class="mt-2" T="string" Placeholder="RG"
                              Variant="Variant.Outlined"
                              @bind-Value="colaborador.RG"
                              Label="RG" For="@(() => colaborador.RG)" />
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudTextField Class="mt-2" T="string" Placeholder="CPF"
                              Variant="Variant.Outlined"
                              @bind-Value="colaborador.CPF"
                              Label="CPF" For="@(() => colaborador.CPF)" />
            </MudItem>
            <MudItem xs="12" sm="2">
                <MudDatePicker Label="Data de Nascimento" Editable="true" @bind-Date="dataNascimento" Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" Placeholder="pt-BR Date" />
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3 sombra" Justify="Justify.Center">
        <MudText Class="mt-4" Typo="Typo.h6">Endereço</MudText>
        <MudGrid>
            <MudItem xs="12" sm="2">
                <MudTextField Class="mt-1" T="string" Placeholder="CEP"
                              Variant="Variant.Outlined"
                              OnBlur="BuscarCep"
                              @bind-Value="colaborador.Endereco.CEP"
                              Label="CEP" For="@(() => colaborador.Endereco.CEP)" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="Logradouro"
                              Variant="Variant.Outlined"
                              @bind-Value="colaborador.Endereco.Logradouro"
                              Label="Logradouro" For="@(() => colaborador.Endereco.Logradouro)" />
            </MudItem>
            <MudItem xs="12" sm="2">
                <MudTextField Class="mt-1" T="string" Placeholder="Número"
                              Variant="Variant.Outlined"
                              @bind-Value="colaborador.Endereco.Numero"
                              Label="Número" For="@(() => colaborador.Endereco.Numero)" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="Bairro"
                              Variant="Variant.Outlined"
                              @bind-Value="colaborador.Endereco.Bairro"
                              Label="Bairro" For="@(() => colaborador.Endereco.Bairro)" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="Cidade"
                              Variant="Variant.Outlined"
                              @bind-Value="colaborador.Endereco.Localidade"
                              Label="Cidade" For="@(() => colaborador.Endereco.Localidade)" />
            </MudItem>
            <MudItem xs="12" sm="2">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="UF"
                              Variant="Variant.Outlined"
                              @bind-Value="colaborador.Endereco.UF"
                              Label="UF" For="@(() => colaborador.Endereco.UF)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Class="mt-1" T="string" Placeholder="Complemento"
                              Variant="Variant.Outlined"
                              @bind-Value="colaborador.Endereco.Complemento"
                              Label="Complemento" For="@(() => colaborador.Endereco.Complemento)" />
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudGrid>
        <MudItem xs="12" sm="9">
             <MudPaper Class="px-8 pt-2 pb-4 ml-3 my-3 sombra" Justify="Justify.Center">
                <MudText Class="mt-4" Typo="Typo.h6">Contatos</MudText>
                <MudGrid>
                    <MudItem xs="12" sm="4">
                        <MudGrid>
                            <MudItem xs="12" sm="12">
                                <MudSelect Dense="true" T="string" Label="Tipo" @bind-Value="Contato.Tipo" Variant="Variant.Filled" RequiredError="Campo obrigatório.">
                                    <MudSelectItem Value="@("Fixo")" />
                                    <MudSelectItem Value="@("Celular")" />
                                    <MudSelectItem Value="@("Email")" />
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="12">
                                <MudTextField T="string" Placeholder="Contato"
                                              Variant="Variant.Outlined"
                                              @bind-Value="Contato.Descricao" />
                            </MudItem>
                            <MudItem xs="12" sm="12">
                                <MudTextField T="string" Placeholder="Descrição"
                                              Variant="Variant.Outlined"
                                              @bind-Value="Contato.Complemento" />
                            </MudItem>
                            <MudItem xs="12" sm="12">
                                <MudButton Style="width: 100%"                                          
                                           Size="@Size.Large"
                                           Variant="@Variant.Filled"
                                           @onclick="AdicionarContato"
                                           Color="@Color.Success">
                                    <MudIcon Icon="@Icons.Material.Filled.Contacts" Class="mr-2" />
                                    Adicionar Contato
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudItem>

                    <MudItem xs="12" sm="8">
                        <MudDataGrid Items="@colaborador.Contatos" Filterable="false" SortMode="@SortMode.None" Groupable="false" Class="mt-2">
                            <Columns>
                                <PropertyColumn Property="x => x.Tipo" />
                                <PropertyColumn Property="x => x.Descricao" />
                                <PropertyColumn Property="x => x.Complemento" />
                                <TemplateColumn CellClass="d-flex justify-end">
                                    <CellTemplate Context="cellContext">
                                        @{
                                            var contato = cellContext.Item;
                                        }
                                        <MudStack Row>
                                            <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" OnClick="() => RemoverContato(contato)">Remover</MudButton>
                                        </MudStack>
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    </MudItem>
                </MudGrid>
             </MudPaper>
        </MudItem>
            
        <MudItem xs="12" sm="3">
            <MudPaper Class="px-8 pt-4 pb-4 mr-3 my-3 sombra" Justify="Justify.Center">
            <MudText Class="mt-2" Typo="Typo.h6">Dados Funcionais</MudText>
            <MudGrid>
                <MudItem xs="12" sm="12">
                    <MudSelect Dense="true" T="CargoResponse" Label="Selecione um Cargo" @bind-Value="cargo" Variant="Variant.Filled" RequiredError="Campo obrigatório.">
                        @foreach (var item in cargos!)
                        {
                            <MudSelectItem Value="@item">@item.Descricao</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudTextField Class="mt-1" T="string" Disabled="true" Placeholder="Usuário de Acesso"
                                    Variant="Variant.Outlined"
                                    @bind-Value="usuario"
                                    RequiredError="Campo obrigatório." />
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudDatePicker Label="Data de Admissão" Editable="true" @bind-Date="dataAdmissao" Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" />
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudDatePicker Label="Data de Demissão" Editable="true" @bind-Date="dataDemissao" Mask="@(new DateMask("dd/MM/yyyy"))" DateFormat="dd/MM/yyyy" />
                </MudItem>               

            </MudGrid>
        </MudPaper>
        </MudItem>                 
    </MudGrid>
    <MudItem Class="d-flex justify-center">
        <MudButton Variant="Variant.Filled"
                   Size="Size.Large"
                   @onclick="Demitir"
                   Color="Color.Error"                  
                   Class="ml-3">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" />
            @btn_demitir
        </MudButton>
    
        <MudButton Variant="Variant.Filled"
                   Size="Size.Large"
                   @onclick="Atualizar"
                   Color="Color.Primary"                  
                   Class="ml-3">
            <MudIcon Icon="@Icons.Material.Filled.Done" Class="mr-2" />
            Confirmar
        </MudButton>
    </MudItem>
</MudForm>

@code {
    [Parameter]
    public string? ColaboradorId { get; set; }

    private ColaboradorRequestEdit colaborador = new();
    private MudForm? form;

    DateTime? dataNascimento = DateTime.Today;
    DateTime? dataAdmissao = DateTime.Today;
    DateTime? dataDemissao;

    private string? usuario;
    private Contato Contato = new Contato { Tipo = "Fixo" };
    private CargoResponse? cargo;
    private ICollection<CargoResponse>? cargos = new List<CargoResponse>();

    string? btn_demitir = "Demitir";

    protected override async Task OnInitializedAsync()
    {
        TitleService.SetTitle("Detalhes do colaborador");
        var response = await colaboradorAPI.GetAsync(Convert.ToInt32(ColaboradorId));

        if (response is not null)
        {
            colaborador.Nome = response.Nome;
            colaborador.RG = response.RG;
            colaborador.CPF = response.CPF;
            colaborador.DataNascimento = response.DataNascimento;            
            colaborador.AgenciaId = response.Agencia.Id;
            colaborador.Contatos = response.Contatos;
            colaborador.Ativo = response.Ativo;
            colaborador.DataDemissao = response.DataDemissao;

            colaborador.Endereco.CEP = response.Endereco.CEP;
            colaborador.Endereco.Localidade = response.Endereco.Localidade;
            colaborador.Endereco.Numero = response.Endereco.Numero;
            colaborador.Endereco.Bairro = response.Endereco.Bairro;
            colaborador.Endereco.UF = response.Endereco.Uf;
            colaborador.Endereco.Complemento = response.Endereco.Complemento;
            colaborador.Endereco.Logradouro = response.Endereco.Logradouro;

            dataNascimento = response.DataNascimento.ToDateTime(TimeOnly.MinValue);
            dataAdmissao = response.DataAdmissao.ToDateTime(TimeOnly.MinValue);

            if (!colaborador.Ativo)
            {
                btn_demitir = "Desfazer Demissão";
                dataDemissao = response.DataDemissao.ToDateTime(TimeOnly.MinValue);
            }

            usuario = response.Usuario.UserName;
            cargos = await cargoAPI.GetCargosAsync();
            if (cargos is not null) cargo = cargos.FirstOrDefault(c => c.Id == response.Cargo.Id);
        }
    }

    private void Demitir()
    {
        if(colaborador.Ativo)
        {
            colaborador.Ativo = false;
            dataDemissao = DateTime.Today.Date;
            btn_demitir = "Desfazer Demissão";
        }
        else
        {
            colaborador.Ativo = true;
            dataDemissao = null;          
            btn_demitir = "Demitir";
        }
    }

    private async Task Atualizar()
    {
        await form!.Validate();

        if (colaborador.Contatos.Count() > 0)
        {
            if (form.IsValid)
            {
                if (dataNascimento is not null) colaborador.DataNascimento = DateOnly.FromDateTime(dataNascimento.Value);
                if (dataAdmissao is not null) colaborador.DataAdmissao = DateOnly.FromDateTime(dataAdmissao.Value);

                colaborador.CargoId = cargo!.Id;

                if (colaborador.Ativo)
                {
                    colaborador.DataDemissao = DateOnly.MinValue;
                }
                else
                {
                    if (dataDemissao is null)
                    {
                        colaborador.DataDemissao = DateOnly.FromDateTime(DateTime.Now.Date);
                    }
                    else
                    {
                        colaborador.DataDemissao = DateOnly.FromDateTime(dataDemissao.Value);
                    }
                }

                if (await colaboradorAPI.UpdateAsync(Convert.ToInt32(ColaboradorId), colaborador))
                {
                    Snackbar.Add("Colaborador atualizado com sucesso!", Severity.Success);
                    navigationManager.NavigateTo($"/colaboradores/{colaborador.AgenciaId}");
                }
                else
                {
                    Snackbar.Add("Houve um erro durante a atualizção!", Severity.Error);
                }

            }
            else
            {
                Snackbar.Add("Por favor, preencha todos os campos!", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("É obrigatório cadastrar pelo menos um contato!", Severity.Error);
        }
        
    }   

    private async Task BuscarCep()
    {
        if (colaborador.Endereco!.CEP.Length == 8 && Regex.IsMatch(colaborador.Endereco.CEP, @"^\d{8}$"))
        {
            HttpClient httpClient = new();

            try
            {
                var response = await httpClient.GetAsync($"https://viacep.com.br/ws/{colaborador.Endereco.CEP}/json/");

                if (response.IsSuccessStatusCode)
                {
                    var endereco = await response.Content.ReadFromJsonAsync<EnderecoResponse>();
                    colaborador.Endereco.Logradouro = endereco!.Logradouro;
                    colaborador.Endereco.Bairro = endereco!.Bairro;
                    colaborador.Endereco.Localidade = endereco!.Localidade;
                    colaborador.Endereco.UF = endereco!.Uf;
                }
            }
            catch
            {
                Snackbar.Add("CEP Inválido ou não encontrado!", Severity.Error);
            }
        }
    }

    private void AdicionarContato()
    {
        bool isValid = true;

        Contato item = new()
            {
                Tipo = Contato.Tipo,
                Descricao = Contato.Descricao,
                Complemento = Contato.Complemento
            };

        if (item.Descricao is not null && item.Complemento is not null)
        {
            switch (item.Tipo)
            {
                case "Fixo":
                    if (!Regex.IsMatch(item.Descricao, @"^[0-9]{10}$")) isValid = false;
                    break;
                case "Celular":
                    if (!Regex.IsMatch(item.Descricao, @"^[0-9]{11}$")) isValid = false;
                    break;
                case "Email":
                    if (!Regex.IsMatch(item.Descricao, @"^[^@\s]+@[^@\s]+\.[^@\s]+$")) isValid = false;
                    break;
            }

            if (isValid)
            {
                if (!colaborador.Contatos.Any(c => c.Descricao.Equals(item.Descricao)))
                {
                    colaborador.Contatos.Add(item);

                    Contato.Descricao = string.Empty;
                    Contato.Complemento = string.Empty;
                }
                else
                {
                    Snackbar.Add("Este contato já existe.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Contato inválido!", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Preencha os campos de contato!", Severity.Error);
        }
    }

    private void RemoverContato(Contato contato)
    {
        colaborador.Contatos.Remove(contato);
    }
    
}