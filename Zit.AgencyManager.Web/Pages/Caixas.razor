@page "/Caixas"
@using Microsoft.AspNetCore.Components.Authorization
@using Zit.AgencyManager.Web.Services.Interfaces

@inject AuthAPI auth
@inject TitleService TitleService
@inject ColaboradorAPI colaboradorAPI
@inject ISnackbar SnackBar
@inject ICaixaService caixaService

<PageTitle>Meus Caixas</PageTitle>

<MudGrid>

    <MudItem xs="12" sm="3">        
        <MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3 sombra" Justify="Justify.Center">                  
            <MudGrid Class="mt-2">
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Style="font-size:medium; font-weight: bold;">Vendas Presenciais</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Storefront" Color="Color.Default" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>                            
                            <MudText Style="font-size:medium">@resumoCaixas.Sum(x => x.Value[0]).ToString("C")</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Style="font-size:medium; font-weight: bold;">Vendas Virtuais</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Whatsapp" Color="Color.Default" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Style="font-size:medium">@resumoCaixas.Sum(x => x.Value[1]).ToString("C")</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Style="font-size:medium;font-weight: bold;">Vendas Totais</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.AttachMoney" Color="Color.Default" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Style="font-size:medium">@resumoCaixas.Sum(x => x.Value[2]).ToString("C")</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="12">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Style="font-size:medium;font-weight: bold;">Saldo do Agente</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.AccountBalance" Color="Color.Default" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Style="font-size:medium">@resumoCaixas.Sum(x => x.Value[3]).ToString("C")</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>        
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="9">
        
        <MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3 sombra" Justify="Justify.Center">
            <MudGrid Class="mt-2">
                <MudItem xs="6" sm="3">
                    <MudSelect Dense="true" T="int" Label="Selecione um mês" @bind-Value="mes" Variant="Variant.Filled">
                        @foreach (var item in MesesDoAno!)
                        {
                            <MudSelectItem Value="@MesesDoAno.IndexOf(item)">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="6" sm="2">
                    <MudTextField Class="mt-2" T="int" Placeholder="Ano"
                                  Variant="Variant.Outlined"
                                  @bind-Value="ano"
                                  Required
                                  RequiredError="Campo Obrigatório"/>
                </MudItem>
                <MudItem xs="12" sm="2">
                    <MudButton Size="@Size.Large"
                               Class="mt-2 mb-4"
                               Style="height:82%"
                               Variant="@Variant.Filled"
                               Color="@Color.Primary"
                               OnClick="() => CarregarCaixas(mes,ano)"
                               StartIcon="@Icons.Material.Filled.Search">
                            Buscar
                    </MudButton>
                </MudItem>
                <MudButton Size="@Size.Large"
                           Class="mt-5 mb-4 mr-4 ml-auto d-flex justify-end"
                           Variant="@Variant.Filled"
                           Color="@Color.Success"
                           OnClick="AbrirCaixa"
                           StartIcon="@Icons.Material.Filled.Add">
                    Abrir Caixa
                </MudButton>
            </MudGrid>
           
            <MudDataGrid Items="@CaixasResponse" Filterable="false" SortMode="@SortMode.None" Class="mt-6" Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Data.ToShortDateString()" Title="Data do Caixa"/>

                    <TemplateColumn Title="Status">
                        <CellTemplate Context="cellContext">
                            @{
                                var caixa = cellContext.Item;
                                string status = caixa.Aberto ? "Aberto" : "Fechado";
                            }
                            <div>@status</div>
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn Title="Presencial">
                        <CellTemplate Context="cellContext">
                            @{ var caixa = cellContext.Item; }
                            <MudText>@resumoCaixas[caixa.Id][0].ToString("C")</MudText>
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn Title="Virtual">
                        <CellTemplate Context="cellContext">
                            @{ var caixa = cellContext.Item; }
                            <MudText>@resumoCaixas[caixa.Id][1].ToString("C")</MudText>
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn Title="Total">
                        <CellTemplate Context="cellContext">
                            @{ var caixa = cellContext.Item; }
                            <MudText>@resumoCaixas[caixa.Id][2].ToString("C")</MudText>
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn Title="Saldo">
                        <CellTemplate Context="cellContext">
                            @{ var caixa = cellContext.Item; }
                            <MudText>@resumoCaixas[caixa.Id][3].ToString("C")</MudText>
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate Context="cellContext">
                            @{ var caixa = cellContext.Item; }
                            @if(caixa.Aberto)
                            {
                                <MudStack Row>
                                    <MudButton Size="@Size.Small"
                                               Variant="@Variant.Filled"
                                               Color="@Color.Info"
                                               Href=@($"/Caixa/{caixa.Id}")
                                               StartIcon="@Icons.Material.Filled.Search">
                                        Visualizar
                                    </MudButton>
                                </MudStack>
                            }
                            else
                            {
                                <MudStack Row>
                                    <MudButton Size="@Size.Small"
                                               Variant="@Variant.Filled"
                                               Color="@Color.Warning"
                                               Href=@($"/Caixa/{caixa.Id}")
                                               StartIcon="@Icons.Material.Filled.Search">
                                        Revisar
                                    </MudButton>
                                </MudStack>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
            
        </MudPaper>
    </MudItem>
        
 </MudGrid>


@code {
    private ICollection<CaixaResponse>? CaixasResponse = new List<CaixaResponse>();
    private AuthenticationState? authState;
    private ColaboradorResponse? colaborador;

    private Dictionary<int, decimal[] > resumoCaixas = new Dictionary<int, decimal[]>();
    private int mes;
    private int ano;

    private List<string>? MesesDoAno = new()
    {
        "Janeiro","Fevereiro","Março", "Abril", "Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro", "Dezembro"
    };


    protected override async Task OnInitializedAsync()
    {
        TitleService.SetTitle("Caixas do Operador");

        authState = await auth.GetAuthenticationStateAsync();

        colaborador = await colaboradorAPI.GetColaboradorByUsernameAsync(authState.User.Identity!.Name!);

        mes = DateTime.Today.Month-1;
        ano = DateTime.Today.Year;

        await CarregarCaixas(mes,ano);

    }  

    private async Task CarregarCaixas(int mes, int ano)
    {
        CaixasResponse = await caixaService.GetCaixasByOperadorAsync(colaborador!.Id, mes+1, ano);

        if(CaixasResponse is not null)
        {
            resumoCaixas.Clear();

            foreach (var caixa in CaixasResponse)
            {              
                var vendaVirtual = await caixaService.GetVendasVirtuaisAsync(caixa.Id);
                var vendaPresencial = await caixaService.GetVendasPresenciaisAsync(caixa.Id);
                var vendaTotal = await caixaService.GetTotalVendasAsync(caixa.Id);
                var saldo = await caixaService.GetSaldoAsync(caixa.Id);

                resumoCaixas.Add(caixa.Id, [vendaPresencial, vendaVirtual, vendaTotal, saldo]);
            }
        }        
    }

    private async Task AbrirCaixa()
    {
        var result = await caixaService.CreateCaixaAsync(new(colaborador!.Id));

        if (!result.Equals("Ok"))
        {
            SnackBar.Add($"Erro: {result}", Severity.Error);
        }

        await CarregarCaixas(mes, ano);       
    }    
}
