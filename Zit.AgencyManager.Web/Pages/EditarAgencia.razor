@page "/EditarAgencia/{AgenciaId}"

@inject AgenciaAPI agenciaAPI
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject TitleService TitleService

<PageTitle>Editar Agência</PageTitle>

<MudForm Model="@agencia" @ref="form">

    <MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3 sombra" Justify="Justify.Center">    
        <MudText Class="mt-4" Typo="Typo.h6">Dados</MudText>
        <MudGrid Class="mt-1">
            <MudItem xs="12" sm="6">
                <MudTextField Class="mt-2" T="string" Placeholder="Nome da Agência"
                                Variant="Variant.Outlined"
                                @bind-Value="agencia.Descricao"
                                Label="Nome da agência" For="@(() => agencia.Descricao)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Class="mt-2" T="string" Placeholder="CNPJ"
                                Variant="Variant.Outlined"
                                @bind-Value="agencia.CNPJ"
                                Label="CNPJ" For="@(() => agencia.CNPJ)" />
            </MudItem>
        </MudGrid>
        <MudImage Class="mt-2" src="@fileImage" />
        <MudFileUpload T="IBrowserFile" Accept=".jpg" FilesChanged="UploadFile">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.PhotoCamera"
                           for="@context">
                    Foto da Agência
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudPaper>

    <MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3 sombra" Justify="Justify.Center">
        <MudText Class="mt-4" Typo="Typo.h6">Endereço</MudText>
        <MudGrid Class="mt-1">
            <MudItem xs="12" sm="2">
                <MudTextField Class="mt-1" T="string" Placeholder="CEP"
                                Variant="Variant.Outlined"
                                OnBlur="BuscarCep"
                                @bind-Value="agencia.Endereco!.CEP"
                                Label="CEP" For="@(() => agencia.Endereco!.CEP)" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="Logradouro"
                                Variant="Variant.Outlined"
                                @bind-Value="agencia.Endereco!.Logradouro"
                                Label="Logradouro" For="@(() => agencia.Endereco!.Logradouro)" />
            </MudItem>
            <MudItem xs="12" sm="2">
                <MudTextField Class="mt-1" T="string" Placeholder="Número"
                                Variant="Variant.Outlined"
                                @bind-Value="agencia.Endereco!.Numero"
                                Label="Número" For="@(() => agencia.Endereco!.Numero)" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="Bairro"
                                Variant="Variant.Outlined"
                                @bind-Value="agencia.Endereco!.Bairro"
                                Label="Bairro" For="@(() => agencia.Endereco!.Bairro)" />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="Cidade"
                                Variant="Variant.Outlined"
                                @bind-Value="agencia.Endereco!.Localidade"
                                Label="Cidade" For="@(() => agencia.Endereco!.Localidade)" />
            </MudItem>
            <MudItem xs="12" sm="2">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="UF"
                                Variant="Variant.Outlined"
                                @bind-Value="agencia.Endereco!.UF"
                                Label="UF" For="@(() => agencia.Endereco!.UF)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Class="mt-1" T="string" Placeholder="Complemento"
                                Variant="Variant.Outlined"
                                @bind-Value="agencia.Endereco!.Complemento"
                                Label="Complemento" For="@(() => agencia.Endereco!.Complemento)" />
            </MudItem>
        </MudGrid>        
    </MudPaper>
    
    <MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3 sombra" Justify="Justify.Center">   
        <MudText Class="mt-4" Typo="Typo.h6">Contatos</MudText>
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudGrid>
                    <MudItem xs="12" sm="12">
                        <MudSelect Dense="true" T="string" Label="Tipo" @bind-Value="Contato.Tipo" Variant="Variant.Filled" RequiredError="Campo obrigatório.">
                            <MudSelectItem Value="@("Fixo")" />
                            <MudSelectItem Value="@("Celular")" />
                            <MudSelectItem Value="@("Email")" />
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="12">
                        <MudTextField T="string" Placeholder="Contato"
                                      Variant="Variant.Outlined"
                                      @bind-Value="Contato.Descricao" />
                    </MudItem>
                    <MudItem xs="12" sm="12">
                        <MudTextField T="string" Placeholder="Descrição"
                                      Variant="Variant.Outlined"
                                      @bind-Value="Contato.Complemento" />
                    </MudItem>
                    <MudItem xs="12" sm="12">
                        <MudButton Style="width: 100%"
                                   Size="@Size.Large"
                                   Variant="@Variant.Filled"
                                   @onclick="AdicionarContato"
                                   Color="@Color.Success">
                            <MudIcon Icon="@Icons.Material.Filled.Contacts" Class="mr-2" />
                            Adicionar Contato
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudItem>

            <MudItem xs="12" sm="8">
                <MudDataGrid Items="@agencia.Contatos" Filterable="false" SortMode="@SortMode.None" Groupable="false" Class="mt-2">
                    <Columns>
                        <PropertyColumn Property="x => x.Tipo" />
                        <PropertyColumn Property="x => x.Descricao" />
                        <PropertyColumn Property="x => x.Complemento" />
                        <TemplateColumn CellClass="d-flex justify-end">
                            <CellTemplate Context="cellContext">
                                @{
                                    var contato = cellContext.Item;
                                }
                                <MudStack Row>
                                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" OnClick="() => RemoverContato(contato)">Remover</MudButton>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudItem>
        </MudGrid>

        <MudItem Class="d-flex justify-end">
            <MudButton Variant="Variant.Filled"
                   Size="Size.Large"
                   @onclick="Editar"
                   Color="Color.Secondary"
                   StartIcon="@Icons.Material.Filled.Save">
                Atualizar Dados
            </MudButton>

            <MudButton Variant="Variant.Filled"
                       Size="Size.Large"
                       @onclick="Deletar"
                       Color="Color.Error"
                       Class="ml-3"
                       StartIcon="@Icons.Material.Filled.Delete">                
                Deletar Agência
            </MudButton>
        </MudItem>
    </MudPaper>
    </MudForm>



@code {
    [Parameter] 
    public string? AgenciaId { get; set; }

    private AgenciaRequestEdit agencia = new();
    private MudForm? form;

    private string? fileImage;
    private Contato Contato = new Contato { Tipo = "Fixo" };

    protected override async Task OnInitializedAsync()
    {
        TitleService.SetTitle("Editar dados da Agência");

        var agenciaResponse = await agenciaAPI.GetAgenciaPorIdAsync(Convert.ToInt32(AgenciaId));

        agencia.CNPJ = agenciaResponse!.CNPJ;
        agencia.Descricao = agenciaResponse!.Descricao;
        agencia.Contatos = agenciaResponse.Contatos;

        agencia.Endereco.CEP = agenciaResponse.Endereco.CEP;
        agencia.Endereco.Logradouro = agenciaResponse.Endereco.Logradouro;
        agencia.Endereco.Numero = agenciaResponse.Endereco.Numero;
        agencia.Endereco.Bairro = agenciaResponse.Endereco.Bairro;
        agencia.Endereco.Localidade = agenciaResponse.Endereco.Localidade;
        agencia.Endereco.UF = agenciaResponse.Endereco.Uf;
        agencia.Endereco.Localidade = agenciaResponse.Endereco.Localidade;
        agencia.Endereco.Complemento = agenciaResponse.Endereco.Complemento;
        
    }

    private async Task BuscarCep()
    {
        if (agencia.Endereco!.CEP.Length == 8 && Regex.IsMatch(agencia.Endereco.CEP, @"^\d{8}$"))
        {
            HttpClient httpClient = new();

            try
            {
                var response = await httpClient.GetAsync($"https://viacep.com.br/ws/{agencia.Endereco.CEP}/json/");

                if (response.IsSuccessStatusCode)
                {
                    var endereco = await response.Content.ReadFromJsonAsync<EnderecoResponse>();
                    agencia.Endereco.Logradouro = endereco!.Logradouro;
                    agencia.Endereco.Bairro = endereco!.Bairro;
                    agencia.Endereco.Localidade = endereco!.Localidade;
                    agencia.Endereco.UF = endereco!.Uf;
                }
            }
            catch
            {
                Snackbar.Add("CEP Inválido ou não encontrado!", Severity.Error);
            }
        }
    }

    private void AdicionarContato()
    {
        bool isValid = true;

        Contato item = new()
            {
                Tipo = Contato.Tipo,
                Descricao = Contato.Descricao,
                Complemento = Contato.Complemento
            };

        if (item.Descricao is not null && item.Complemento is not null)
        {
            switch (item.Tipo)
            {
                case "Fixo":
                    if (!Regex.IsMatch(item.Descricao, @"^[0-9]{10}$")) isValid = false;
                    break;
                case "Celular":
                    if (!Regex.IsMatch(item.Descricao, @"^[0-9]{11}$")) isValid = false;
                    break;
                case "Email":
                    if (!Regex.IsMatch(item.Descricao, @"^[^@\s]+@[^@\s]+\.[^@\s]+$")) isValid = false;
                    break;
            }

            if (isValid)
            {
                if (!agencia.Contatos.Any(c => c.Descricao.Equals(item.Descricao)))
                {
                    agencia.Contatos.Add(item);

                    Contato.Descricao = string.Empty;
                    Contato.Complemento = string.Empty;
                }
                else
                {
                    Snackbar.Add("Este contato já existe.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Contato inválido!", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Preencha os campos de contato!", Severity.Error);
        }

    }

    private void RemoverContato(Contato contato)
    {
        agencia.Contatos.Remove(contato);
    }

    private async Task UploadFile(IBrowserFile file)
    {       
        var format = "image/jpeg";
        var resizedImage = await file.RequestImageFileAsync(format, 200, 200);

        using var fileStream = resizedImage.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        var imageUpload = Convert.ToBase64String(memoryStream.ToArray());
        fileImage = $"data:{format};base64,{imageUpload}";
        agencia.Foto = imageUpload;

        fileImage = $"data:{format};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }

    private async Task Deletar()
    {
        if (await agenciaAPI.DeleteAgenciaAsync(Convert.ToInt32(AgenciaId)))
        {
            Snackbar.Add("Agência deletada com sucesso!", Severity.Success);
            navigationManager.NavigateTo("/Agencias");
        }
        else
        {
            Snackbar.Add("Não é possível remover o registro desta agência pois há Colaboradores vinculados a ela!", Severity.Error);
        }
    }

    private async Task Editar()
    {
        await form!.Validate();

        if (agencia.Contatos!.Count > 0)
        {
            if (form.IsValid)
            {
                if (await agenciaAPI.UpdateAgenciaAsync(Convert.ToInt32(AgenciaId), agencia))
                {
                    Snackbar.Add("Agência atualizada com sucesso!", Severity.Success);
                    navigationManager.NavigateTo("/Agencias");
                }
                else
                {
                    Snackbar.Add("Erro ao atualizar agência!", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Por favor, preencha todos os campos!", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("É obrigatório cadastrar pelo menos um contato!", Severity.Error);
        }
    }
}