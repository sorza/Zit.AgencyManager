@page "/CadastrarAgencia"

@inject AgenciaAPI agenciaAPI
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar

<MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3" Justify="Justify.Center">

    <MudText Class="mt-4" Typo="Typo.h4">Cadastro de Agência</MudText>
    
    <MudForm Model="@agencia" @ref="form">
        <MudText Class="mt-4" Typo="Typo.h6">Dados</MudText>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudTextField Class="mt-2" T="string" Placeholder="Nome da Agência"
                                Variant="Variant.Outlined"                               
                                @bind-Value="agencia.Descricao"
                                Label="Descrição" For="@(() => agencia.Descricao)" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Class="mt-2" T="string" Placeholder="CNPJ"
                                Variant="Variant.Outlined"                              
                                @bind-Value="agencia.CNPJ"
                                Label="CNPJ" For="@(() => agencia.CNPJ)" />
            </MudItem>
        </MudGrid>
        <MudText Class="mt-4" Typo="Typo.h6">Endereço</MudText>
        <MudGrid>
            <MudItem xs="12" sm="2">
                <MudTextField Class="mt-1" T="string" Placeholder="CEP"
                              Variant="Variant.Outlined"
                              Required="true"
                              OnBlur="BuscarCep"
                              @bind-Value="agencia.Endereco.CEP"
                              RequiredError="Campo obrigatório." />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="Logradouro"
                              Variant="Variant.Outlined"
                              Required="true"
                              @bind-Value="agencia.Endereco.Logradouro"
                              RequiredError="Campo obrigatório." />
            </MudItem>
            <MudItem xs="12" sm="2">
                <MudTextField Class="mt-1" T="string" Placeholder="Número"
                              Variant="Variant.Outlined"
                              Required="true"
                              @bind-Value="agencia.Endereco.Numero"
                              RequiredError="Campo obrigatório." />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="Bairro"
                              Variant="Variant.Outlined"
                              Required="true"
                              @bind-Value="agencia.Endereco.Bairro"
                              RequiredError="Campo obrigatório." />
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="Cidade"
                              Variant="Variant.Outlined"
                              Required="true"
                              @bind-Value="agencia.Endereco.Cidade"
                              RequiredError="Campo obrigatório." />
            </MudItem>
            <MudItem xs="12" sm="2">
                <MudTextField Disabled="true" Class="mt-1" T="string" Placeholder="UF"
                              Variant="Variant.Outlined"
                              Required="true"
                              @bind-Value="agencia.Endereco.Uf"
                              RequiredError="Campo obrigatório." />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Class="mt-1" T="string" Placeholder="Complemento"
                              Variant="Variant.Outlined"
                              @bind-Value="agencia.Endereco.Complemento" />
            </MudItem>
        </MudGrid>
        <MudImage Class="mt-4" src="@fileImage" />
        <MudFileUpload T="IBrowserFile" Accept=".jpg" FilesChanged="UploadFile">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.PhotoCamera"
                           for="@context">
                    Foto da Agência
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        <MudText Class="mt-4" Typo="Typo.h6">Contatos</MudText>
        <MudGrid>
            <MudItem xs="12" sm="4">
                
                <MudSelect Dense="true" T="string" Label="Tipo" @bind-Value="Contato.Tipo" Variant="Variant.Filled" RequiredError="Campo obrigatório.">
                    <MudSelectItem Value="@("Fixo")" />
                    <MudSelectItem Value="@("Celular")" />
                    <MudSelectItem Value="@("Email")" />
                </MudSelect>               

                <MudTextField Class="mt-4 mr-2" T="string" Placeholder="Contato"
                              Variant="Variant.Outlined"
                              @bind-Value="Contato.Descricao"/>

                <MudTextField Class="mt-4 mr-3" T="string" Placeholder="Descrição"
                              Variant="Variant.Outlined"
                              @bind-Value="Contato.Complemento"/>
               
                <MudButton  Style="width: 100%"
                            Class="mt-4 mb-4"
                            Size="@Size.Large"
                            Variant="@Variant.Filled"
                            @onclick="AdicionarContato"
                            Color="@Color.Success">
                    <MudIcon Icon="@Icons.Material.Filled.Contacts" Class="mr-2" />
                    Adicionar Contato
                </MudButton>
                
            </MudItem>

            <MudItem xs="12" sm="8">
                <MudDataGrid Items="@agencia.Contatos" Filterable="false" SortMode="@SortMode.None" Groupable="false" Class="mt-2">
                    <Columns>
                        <PropertyColumn Property="x => x.Tipo" />
                        <PropertyColumn Property="x => x.Descricao" />
                        <PropertyColumn Property="x => x.Complemento" />
                        <TemplateColumn CellClass="d-flex justify-end">
                            <CellTemplate Context="cellContext">
                                @{
                                    var contato = cellContext.Item;
                                }
                                <MudStack Row>
                                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" OnClick="() => RemoverContato(contato)">Remover</MudButton>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudItem>            
        </MudGrid>        
       
        <MudButton Variant="Variant.Filled"
                    Size="Size.Large"
                    @onclick="Cadastrar"
                    Color="Color.Primary"
                    Class="ml-auto mt-2 d-flex justify-end">
            <MudIcon Icon="@Icons.Material.Filled.Storefront" Class="mr-2" />
            Cadastrar Agência
        </MudButton>
    </MudForm>
</MudPaper>

@code {
    private AgenciaRequest agencia = new();   
    private MudForm form;

    private string? fileImage;

    private Contato Contato = new Contato { Tipo = "Fixo"};

    private async Task BuscarCep()
    {
        HttpClient httpClient = new();

        try
        {
            var response = await httpClient.GetAsync($"https://viacep.com.br/ws/{agencia.Endereco.CEP}/json/");

            if (response.IsSuccessStatusCode)
            {
                var endereco = await response.Content.ReadFromJsonAsync<EnderecoResponse>();
                agencia.Endereco.Logradouro = endereco!.Logradouro;
                agencia.Endereco.Bairro = endereco!.Bairro;
                agencia.Endereco.Cidade = endereco!.Localidade;
                agencia.Endereco.Uf = endereco!.Uf;
            }
        }
        catch
        {
            Snackbar.Add("CEP Inválido ou não encontrado!", Severity.Error);
        }

    }

    private async Task Cadastrar()
    {
        await form.Validate();

        if(agencia.Contatos.Count > 0)
        {
            if (form.IsValid)
            {
                if (await agenciaAPI.AddAgenciaAsync(agencia))
                {
                    Snackbar.Add("Agência cadastrada com sucesso!", Severity.Success);
                    navigationManager.NavigateTo("/Agencias");
                }
                else
                {
                    Snackbar.Add("Erro ao cadastrar agência!", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Por favor, preencha todos os campos!", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("É obrigatório cadastrar pelo menos um contato!", Severity.Error);
        }
    }

    private void AdicionarContato()
    {
        bool isValid = true;

        Contato item = new()
        {
            Tipo = Contato.Tipo,
            Descricao = Contato.Descricao, 
            Complemento = Contato.Complemento
        };

        if(item.Descricao is not null && item.Complemento is not null)
        {
            switch (item.Tipo)
            {
                case "Fixo":
                    if (!Regex.IsMatch(item.Descricao, @"^[0-9]{10}$")) isValid = false;
                    break;
                case "Celular":
                    if (!Regex.IsMatch(item.Descricao, @"^[0-9]{11}$")) isValid = false;
                    break;
                case "Email":
                    if (!Regex.IsMatch(item.Descricao, @"^[^@\s]+@[^@\s]+\.[^@\s]+$")) isValid = false;
                    break;
            }

            if (isValid)
            {
                if (!agencia.Contatos.Any(c => c.Descricao.Equals(item.Descricao)))
                {
                    agencia.Contatos.Add(item);

                    Contato.Descricao = string.Empty;
                    Contato.Complemento = string.Empty;
                }
                else
                {
                    Snackbar.Add("Este contato já existe.", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Contato inválido!", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Preencha os campos de contato!", Severity.Error);
        }        
    }

    private void RemoverContato(Contato contato)
    {
        agencia.Contatos!.Remove(contato);
    }

    private async Task UploadFile(IBrowserFile file)
    {      
        var format = "image/jpeg";
        var resizedImage = await file.RequestImageFileAsync(format, 200, 200);

        using var fileStream = resizedImage.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        var imageUpload = Convert.ToBase64String(memoryStream.ToArray());
        fileImage = $"data:{format};base64,{imageUpload}";
        agencia.Foto = imageUpload;

        fileImage = $"data:{format};base64,{Convert.ToBase64String(memoryStream.ToArray())}";

    }
}

    

