@page "/Caixa/{IdCaixa}"
@using Microsoft.AspNetCore.Components.Authorization

@inject VendaAPI vendaAPI
@inject TitleService TitleService
@inject ContratoAPI contratoAPI
@inject CaixaAPI caixaAPI
@inject EmpresaAPI empresaAPI

<PageTitle>Caixa do Operador</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="8">
        <MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3" Justify="Justify.Center">            
            <MudText Class="mt-4" Typo="Typo.h6">Registrar venda</MudText>

            <MudGrid Class="mt-2">
                <MudItem xs="12" sm="4">
                    <MudSelect  Dense="true" 
                                T="EmpresaResponse" 
                                Label="Informe uma empresa" 
                                @bind-Value="empresa" 
                                Variant="Variant.Filled" 
                                RequiredError="Campo obrigatório." 
                                ToStringFunc="@(e => e.NomeFantasia)">
                        @foreach (var item in empresas)
                        {
                            <MudSelectItem Value="@item">@item.NomeFantasia</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudTextField Class="mt-2" T="decimal" Placeholder="Dinheiro"
                                    Variant="Variant.Outlined"
                                    Label="Dinheiro"
                                    @bind-Value="venda.Dinheiro" />
                </MudItem>
                <MudItem xs="12" sm="3">
                    <MudTextField Class="mt-2" T="decimal" Placeholder="Cartão"
                                    Label="Cartão"
                                    Variant="Variant.Outlined"
                                    @bind-Value="venda.Cartao" />
                </MudItem>
                <MudItem xs="12" sm="2" Class="mb-4">
                    <MudButton Size="@Size.Large"
                                Class="mt-2 mb-4 mr-2 ml-auto d-flex"
                                Variant="@Variant.Filled"
                                Color="@Color.Success"
                                Style="height:85%"
                                OnClick="() => AdicionarVenda(venda)"
                                StartIcon="@Icons.Material.Filled.Add">
                        @btn_Confirmar
                    </MudButton>
                </MudItem>
            </MudGrid>           
        </MudPaper>

        <MudDataGrid Items="@vendas" Filterable="false" SortMode="@SortMode.None" Class="mt-6 mx-3" Groupable="false">
            <Columns>
                <PropertyColumn Property="x => x.Empresa.NomeFantasia" Title="Empresa"/>
                <PropertyColumn Property="x => x.Dinheiro" Title="Venda em Dinheiro" Format="C" />
                <PropertyColumn Property="x => x.Cartao" Title="Venda em Cartão" Format="C" />
                <PropertyColumn Property="x => (x.Dinheiro + x.Cartao)" Title="Venda Total" Format="C" />

                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate Context="cellContext">
                        @{
                            var venda = cellContext.Item;
                        }
                        <MudStack Row>                            
                            <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" OnClick="() => RemoverVenda(venda)" StartIcon="@Icons.Material.Filled.Delete"></MudButton>
                            <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Info" OnClick="() => EditarVenda(venda)" StartIcon="@Icons.Material.Filled.Edit"></MudButton>
                        </MudStack>
                    </CellTemplate>                  
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudItem>

    <MudItem xs="12" sm="4">
        <MudPaper Class="px-8 pt-2 pb-4 mx-3 my-3" Justify="Justify.Center">

        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public string? IdCaixa { get; set; }
    private CaixaResponse? caixa;

    private ICollection<EmpresaResponse> empresas = new List<EmpresaResponse>();
    private ICollection<VendaResponse> vendas = new List<VendaResponse>();

    private EmpresaResponse? empresa;
    private VendaRequest venda = new();
    private int vendaEditar;

    private string btn_Confirmar = "Adicionar";

    protected override async Task OnInitializedAsync()
    {
        TitleService.SetTitle("Caixa do Operador");

        var response = await caixaAPI.GetCaixaAsync(Convert.ToInt32(IdCaixa));

        if(response is not null)
        {
            caixa = response;
            venda.CaixaId = caixa.Id;

            await CarregarVendas();
            await CarregarEmpresas();
        }               
    }

    private async Task CarregarVendas()
    {
        var result = await vendaAPI.GetVendasByCaixaAsync(caixa!.Id);
        if (result is not null) vendas = result;
    }

    private async Task AdicionarVenda(VendaRequest venda)
    {
        if (empresa is not null)
        {
            venda.EmpresaId = empresa!.Id;

            if (btn_Confirmar.Equals("Adicionar"))
            {
                if (await vendaAPI.AddVendaAsync(venda))
                {                   
                    await CarregarVendas();
                    await CarregarEmpresas();

                    empresa = empresas.First();
                    venda.Dinheiro = 0;
                    venda.Cartao = 0;
                }
            }
            else
            {
                if (await vendaAPI.UpdateVendaAsync(new(venda.EmpresaId, venda.Dinheiro, venda.Cartao), vendaEditar))
                {                   
                    await CarregarVendas();
                    await CarregarEmpresas();

                    venda.Dinheiro = 0;
                    venda.Cartao = 0;

                    btn_Confirmar = "Adicionar";
                }
            }
        }
    }

    private async Task RemoverVenda(VendaResponse venda)
    {
        if (await vendaAPI.DeleteVendaAsync(venda.Id)) await CarregarVendas();
        await CarregarEmpresas();
    }

    private async Task EditarVenda(VendaResponse vendaEdit)
    {
        empresas.Clear();

        var response = await empresaAPI.GetEmpresaAsync(vendaEdit.Empresa.Id);
        empresas.Add(response!);

        empresa = empresas.First();

        venda.EmpresaId = vendaEdit.Empresa.Id;
        venda.Dinheiro = vendaEdit.Dinheiro;
        venda.Cartao = vendaEdit.Cartao;

        vendaEditar = vendaEdit.Id;

        btn_Confirmar = "Editar";
    }

    private async Task CarregarEmpresas()
    {
        empresas.Clear();

        var contratos = await contratoAPI.GetContratosByAgenciaAsync(caixa!.Colaborador.AgenciaId);

        if (contratos is not null)
        {  
            List<EmpresaResponse> empresasVendas = new List<EmpresaResponse>();
            foreach (var item in vendas)
            {
                empresasVendas.Add(item.Empresa);
            }

            foreach(var contrato in contratos)
            {
                bool adicionar = true;

                foreach(var item in empresasVendas)
                {
                    if (contrato.Empresa.Id == item.Id) adicionar = false; 
                }

                if (adicionar) empresas.Add(contrato.Empresa);
            }
        }
    }
}
