@page "/contratos/{AgenciaId}"
@inject ContratoAPI contratoAPI
@inject ISnackbar Snackbar

@inject TitleService TitleService

<PageTitle>Contratos</PageTitle>

<MudPaper Class="px-8 pt-2 pb-4 mx-8 my-6" Justify="Justify.Center">

    <MudDataGrid Items="@contratos" Filterable="false" SortMode="@SortMode.None" Class="mt-6" Groupable="false">
        <Columns>
            <PropertyColumn Property="x => x.Empresa.NomeFantasia" Title="Empresa"/>
            <PropertyColumn Property="x => x.Comissao" Title="Comissão (%)" />
            <PropertyColumn Property="x => x.ModalidadeComissao" Title="Recebimento" />
            <PropertyColumn Property="x => x.ModalidadeAcerto" Title="Acerto" />
            <PropertyColumn Property="x => x.FrequenciaAcerto" Title="Pagamento" />

            <TemplateColumn Title="Emite Nota">
                <CellTemplate Context="cellContext">
                    @{
                        var contrato = cellContext.Item;
                        string status = contrato.EmiteNota ? "Sim" : "Não";
                    }
                    <div>@status</div>
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="Status">
                <CellTemplate Context="cellContext">
                    @{
                        var contrato = cellContext.Item;
                        string status = contrato.Ativo ? "Ativo" : "Inativo";
                    }
                    <div>@status</div>
                </CellTemplate>
            </TemplateColumn>           

            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate Context="cellContext">
                    @{
                        var contrato = cellContext.Item;
                    }
                    <MudStack Row>
                        <MudButton Size="@Size.Small"
                                   Variant="@Variant.Filled"
                                   Color="@Color.Info"
                                   Href=@($"/EditarContrato/{contrato.Id}")
                                   StartIcon="@Icons.Material.Filled.Edit">
                            Alterar Contrato
                        </MudButton>

                        <MudButton Size="@Size.Small"
                                   Variant="@Variant.Filled"
                                   Color="@Color.Error"
                                   OnClick="() => Deletar(contrato.Id)"
                                   StartIcon="@Icons.Material.Filled.Delete">
                            Remover
                        </MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudButton Variant="Variant.Filled"
               Size="Size.Large"
               Href=@($"/CadastrarContrato/{AgenciaId}")
               Color="Color.Primary"
               Class="ml-auto mt-4 mr-2 justify-end">
        <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
        Novo Contrato
    </MudButton>
</MudPaper>

@code {
    [Parameter]
    public string? AgenciaId { get; set; }

    private ICollection<ContratoAgenciaEmpresaResponse>? contratos;

    protected override async Task OnInitializedAsync()
    {
        TitleService.SetTitle("Contratos da Agência");
        await CarregarContratos();
    }

    private async Task CarregarContratos()
    {
        contratos = await contratoAPI.GetContratosAsync();

        if (contratos is not null) contratos = contratos.Where(c => c.Agencia.Id == Convert.ToInt32(AgenciaId)).OrderByDescending(c => c.Ativo).ToList();
    }

    private async Task Deletar(int id)
    {       
        if(await contratoAPI.DeleteContratoAsync(id))
        {
            Snackbar.Add("Agência cadastrada com sucesso!", Severity.Success);            
            await CarregarContratos();
        }
        else
        {
            Snackbar.Add("Houve um erro durante a deleção.", Severity.Error);
        }
    }
}
